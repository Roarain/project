# -*- coding: utf-8 -*-

import tornado.ioloop
import tornado.web
import tornado.gen
from tornado.options import define, options
import tornado.escape
from tornado.escape import xhtml_escape, xhtml_unescape
import time
from wredis import RedisPool
import ujson
import config
import datetime
import os
import sys
from check import check_parameter
import logging

logging.basicConfig(filename='terminalinfo.log', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
reload(sys)
sys.setdefaultencoding('utf-8')

define('port', default=9999, help='run on the given port', type=int)

class Application(tornado.web.Application):
	def __init__(self):
		handlers = [
			(r"/", Main),
			(r"/terminal", TerminalInfo),
		]
		settings = dict(
			template_path=os.path.join(os.path.dirname(__file__), 'templates'),
			static_path=os.path.join(os.path.dirname(__file__), 'static'),
			xsrf_cookies=True,
			autoescape=None,
		)
		super(Application, self).__init__(handlers, **settings)

class Main(tornado.web.RequestHandler):
	def get(self):
		return self.write('Hello World!')

class TerminalInfo(tornado.web.RequestHandler):
	@tornado.gen.coroutine
	def get(self):
		yield self.main()
	
	@tornado.gen.coroutine
	def post(self):
		yield self.main()
	
	@check_parameter
	def main(self):
		terminal_id = self.get_argument('terminal_id', '')
		terminal_id_A = terminal_id + 'A'
		terminal_id_P = terminal_id + 'P'
	 
		redis_pipe = RedisPool().redis_pipe
		# physical_all_info, current, week, month
		redis_result = redis_pipe.get(terminal_id_A).zrange(terminal_id, -1, -1, withscores=True).zrange(terminal_id_P, -7, -1, withscores=True).zrange(terminal_id_P, -30, -1, withscores=True).execute()
		logging.info('redis_result: {}'.format(redis_result))
		physical_info = ujson.loads(redis_result[0])
		physical_info_u8 = dict()
		for key, value in physical_info.items():
			physical_info_u8[key.encode('utf-8')] = value.encode('utf-8')
		logging.info('physical_info: {}'.format(physical_info_u8))

		redis_result_current = redis_result[1][0]
		current_info = ujson.loads(redis_result_current[0])
		current_date = str(int(redis_result_current[1]))[:8]
		logging.info('current_date: {}, current_info: {}'.format(current_date, current_info))
		
		redis_result_weekly = redis_result[2]
		weekly_date = [str(int(i[1]))[:8] for i in redis_result_weekly]
		weekly_list = [ujson.loads(i[0]) for i in redis_result_weekly]
		#weekly_list = [i[0] for i in redis_result_weekly]
		#weekly_info = dict(date=weekly_date,)
		weekly_info = dict()
		for j in weekly_list[0].keys():
			result = []
			for i in weekly_list:
				result.append(str(i[j]).replace('%', ''))
			weekly_info[j] = result
		logging.info('weekly_info: {}'.format(weekly_info))
		
		redis_result_monthly = redis_result[3]
		monthly_date = [str(int(i[1]))[:8] for i in redis_result_monthly]
		monthly_list = [ujson.loads(i[0]) for i in redis_result_monthly]
		#monthly_info = dict(date=monthly_date,)
		monthly_info = dict()
		for j in monthly_list[0].keys():
                        result = []
                        for i in monthly_list:
                                result.append(xhtml_escape(str(i[j])))
                        monthly_info[j] = result
		logging.info('monthly_info: {}'.format(monthly_info))
		
		result_dict = dict(
				physical_info=physical_info,
				current_info=current_info,
				weekly_info=weekly_info,
				weekly_date=weekly_date,
				monthly_info=monthly_info,
				monthly_date=monthly_date,
			)
		logging.info('result_dict: {}'.format(result_dict))
		'''
		#self.finish(result_dict)
		#self.write(redis_result_json)
		self.write('AAAAAA')
		#self.render('index.html', **result_dict)
		'''
		self.render('index.html', **result_dict)


def main():
	app = Application()
	app.listen(options.port)
	tornado.ioloop.IOLoop.current().start()

if __name__ == '__main__':
	main()
